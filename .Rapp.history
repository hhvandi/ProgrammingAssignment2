Caching the Inverse of a Matrix#
## The following function allows us to cache potentially time-consuming computations, that way, when needed, R can look up the appropriate value when recomputing#
#
## This function allows us to create a special "matrix" object that can cache its inverse#
makeCacheMatrix <- function(x = matrix()) {#
m <- NULL#
            set <- function(y) {#
                    x <<- y#
                    i <<- NULL#
            }#
            get <- function() x#
            setinverse <- function(solve) i <<- solve#
            getinverse <- function() i#
            list(set = set, get = get,#
                 setinverse = setinverse,#
                 getinverse = getinverse)#
    }#
}#
## This function computes the inverse of the special "matrix" returned by 'makeCacheMatrix' above#
cacheSolve <- function(x, ...) {#
         i <- x$getinverse()#
            if(!is.null(i)) {#
                    message("getting cached data")#
                    return(i)#
            }#
            data <- x$get()#
            i <- solve(data, ...)#
            x$setmean(i)#
            i#
}
Caching the Inverse of a Matrix#
## The following function allows us to cache potentially time-consuming computations, that way, when needed, R can look up the appropriate value when recomputing#
#
## This function allows us to create a special "matrix" object that can cache its inverse#
makeCacheMatrix <- function(x = matrix()) {#
m <- NULL#
            set <- function(y) {#
                    x <<- y#
                    i <<- NULL#
            }#
            get <- function() x#
            setinverse <- function(solve) i <<- solve#
            getinverse <- function() i#
            list(set = set, get = get,#
                 setinverse = setinverse,#
                 getinverse = getinverse)#
}#
## This function computes the inverse of the special "matrix" returned by 'makeCacheMatrix' above#
cacheSolve <- function(x, ...) {#
         i <- x$getinverse()#
            if(!is.null(i)) {#
                    message("getting cached data")#
                    return(i)#
            }#
            data <- x$get()#
            i <- solve(data, ...)#
            x$setmean(i)#
            i#
}
Caching the Inverse of a Matrix#
## The following function allows us to cache potentially time-consuming computations, that way, when needed, R can look up the appropriate value when recomputing#
#
## This function allows us to create a special "matrix" object that can cache its inverse#
makeCacheMatrix <- function(x = matrix()) {#
m <- NULL#
            set <- function(y) { # set the value of the vector#
                    x <<- y#
                    i <<- NULL#
            }#
            get <- function() x # get the value of the vector#
            setinverse <- function(solve) i <<- solve #set inverse#
            getinverse <- function() i # get value of the inverse#
            list(set = set, get = get,#
                 setinverse = setinverse,#
                 getinverse = getinverse)#
}#
## This function computes the inverse of the special "matrix" returned by 'makeCacheMatrix' above#
cacheSolve <- function(x, ...) {#
         i <- x$getinverse()#
            if(!is.null(i)) {#
                    message("getting cached data")#
                    return(i)#
            }#
            data <- x$get()#
            i <- solve(data, ...) #compute the inverse#
            x$setmean(i)#
            i#
}
Henry Vandi#
## Caching the Inverse of a Matrix#
## The following function allows us to cache potentially time-consuming computations, that way, when needed, R can look up the appropriate value when recomputing#
#
## This function allows us to create a special "matrix" object that can cache its inverse#
makeCacheMatrix <- function(x = matrix()) {#
m <- NULL#
            set <- function(y) { # set the value of the vector#
                    x <<- y#
                    i <<- NULL#
            }#
            get <- function() x # get the value of the vector#
            setinverse <- function(solve) i <<- solve #set inverse#
            getinverse <- function() i # get value of the inverse#
            list(set = set, get = get,#
                 setinverse = setinverse,#
                 getinverse = getinverse)#
}#
## This function computes the inverse of the special "matrix" returned by 'makeCacheMatrix' above#
cacheSolve <- function(x, ...) {#
         i <- x$getinverse()#
            if(!is.null(i)) {#
                    message("getting cached data")#
                    return(i)#
            }#
            data <- x$get()#
            i <- solve(data, ...) #compute the inverse#
            x$setmean(i)#
            i#
}
